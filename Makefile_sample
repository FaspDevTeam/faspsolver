#######################################################################
# Fast Auxiliary Space Preconditioners (FASP) 
#
# Sample of the top level Makefile: Calls cmake to configure and build
# the library and the test suite. 
#
# 1. Copy this file to  file named "Makefile", and:
# 2. Add your custom settings and type "make" to see all build and
#    configuration options.
########################################################################

####################   User Defined Options   ##########################
#
# The default setting for build type for FASP is RELEASE. The RELEASE 
# build type by default has the "-O3". You may adjust the optimization
# compilation options according to your hardware and software setting.
# For example, on a macbook pro with Intel i7, best options could be
# "-Ofast -march=corei7 -mtune=corei7".
#
# If you want to work with build type DEBUG, then uncomment the next
# line (to include "-Wall -g")
#
# debug=yes
#
# In order to get debug output during run-time, you can uncomment the 
# following line (to include "-Wall -g -DDEBUG_MODE=3"):
# 
# debug=all
#
# The default setting for vebosity level for FASP is verbose=no. If you
# want to increase verbosity level, uncomment the next line:
#
# verbose=yes
#
# By default, FASP generates static libraries. If you need to generate 
# shared libs instead of static libs, uncomment the next line:
#
# shared=yes
#
# You may use multithread version after you enable OpenMP support. To
# setup the environment, you need 
#  >> export OMP_NUM_THREADS=4 (for bash)
#  >> setenv OMP_NUM_THREADS 4 (for tcsh)
# If you want to compile with OpenMP support, uncomment the next line:
#
# openmp=yes
#
# These user options can also be applied as make command line options.
# For example, to enforce the debug compiling options:
#
# make config debug=yes
#
#-------------------------------------------------------------------------
#
# By default, FASP uses the command-line Doxygen to generate a reference
# manual. If you want to use the GUI of Doxgen instead of command-line
# (if there is one installed on your system), uncomment the next line:
#
# doxywizard=yes
#
#-------------------------------------------------------------------------
# If you want to use UMFPACK (part of SuiteSparse package), uncomment the next 
# line (and read carefully the instructons below it):
# 
# umfpack=yes
#
# If you have installed SuiteSparse from source or for some other
# reason you want to specify the path to SuiteSparse libraries and
# header files, uncomment and edit the definition of "suitesparse_dir"
# below (and continue reading...)  
#
# suitesparse_dir="/dir/to/SuiteSparse"
 suitesparse_dir="/Users/ltz1/packages"
#
# IMPORTANT:
# This defines the path to the SuiteSparse library and include files.
# These are expected to be found in $(suitesparse_dir)/lib and
# $(suitesparse_dir)/include or in the system standard paths for libraries
# and header files. As a bare minimum, $(suitesparse_dir)/lib and
# $(suitesparse_dir)/include must contain the library and header files for
# AMD,UMFPACK, and SUITESPARSECONFIG. 
# -------------------------------------------------------------------------
# If you want to use SuperLU, uncomment the next line:
#
# superlu=yes
#
# If you want to specify the path to SuperLU, uncomment the next line
# and give the correct path to SuperLU here. For example:
#
# superlu_dir="/dir/to/SuperLU"
#
#-------------------------------------------------------------------------
# If you want to use MUMPS, uncomment the next line:
#
# mumps=yes
#
# If you want to specify the path to MUMPS, uncomment the next line
# and give the correct path to MUMPS here. For example:
#
# mumps_dir="/dir/to/MUMPS"
#
####################  User Defined Compiler Flags  #####################
cflags="-funroll-loops -funswitch-loops"
cxxflags="-funroll-loops -funswitch-loops"
fflags="-funroll-loops -funswitch-loops"
#
ifeq ($(debug),yes)
	cflags="-Wall -g"
	cxxflags="-Wall -g"
	fflags="-Wall -g"
endif
#
ifeq ($(debug),some)
	cflags="-Wall -g -DDEBUG_MODE=1"
	cxxflags="-Wall -g -DDEBUG_MODE=1"
	fflags="-Wall -g -DDEBUG_MODE=1"
endif
#
ifeq ($(debug),all)
		cflags="-Wall -g -DDEBUG_MODE=3 -DCHMEM_MODE=1"
		cxxflags="-Wall -g -DDEBUG_MODE=3 -DCHMEM_MODE=1"
		fflags="-Wall -g -DDEBUG_MODE=3 -DCHMEM_MODE=1"
endif
####################  User Changes UP TO HERE   ########################

# Let cmake do the configuration. Set up a build dir
build_dir=BUILD_FASP

CONFIG_FLAGS=-DCMAKE_RULE_MESSAGES=ON

ifeq ($(verbose),yes)
    CONFIG_FLAGS+=-DCMAKE_VERBOSE_MAKEFILE=ON
else
    CONFIG_FLAGS+=-DCMAKE_VERBOSE_MAKEFILE=OFF
endif

ifeq ($(debug),yes)
    CONFIG_FLAGS+=-DCMAKE_BUILD_TYPE=DEBUG
else
    CONFIG_FLAGS+=-DCMAKE_BUILD_TYPE=RELEASE
endif

ifeq ($(shared),yes)
    CONFIG_FLAGS+=-DSHARED=$(shared)
endif

ifeq ($(openmp),yes)
    CONFIG_FLAGS+=-DUSE_OPENMP=$(openmp)
endif

ifeq ($(doxywizard),yes)
    CONFIG_FLAGS+=-DDOXYWIZARD=$(doxywizard)
endif

ifeq ($(umfpack), yes)
    CONFIG_FLAGS+=-DUSE_UMFPACK=$(umfpack)
    CONFIG_FLAGS+=-DSUITESPARSE_DIR=$(suitesparse_dir)
endif

ifeq ($(superlu), yes)
    CONFIG_FLAGS+=-DUSE_SUPERLU=$(superlu)
    CONFIG_FLAGS+=-DSUPERLU_DIR=$(superlu_dir)
endif

ifeq ($(mumps), yes)
    CONFIG_FLAGS+=-DUSE_MUMPS=$(mumps)
    CONFIG_FLAGS+=-DMUMPS_DIR=$(mumps_dir)
endif

CONFIG_FLAGS+=-DADD_CFLAGS=$(cflags)
CONFIG_FLAGS+=-DADD_CXXFLAGS=$(cxxflags)
CONFIG_FLAGS+=-DADD_FFLAGS=$(fflags)

all clean install docs headers:
	@if [ ! -f $(build_dir)/Makefile ] ; then \
		echo "Configuration not found! Please perform configuration first."; \
		echo "See the following help screen for usage ..."; \
		echo " "; \
		cat INSTALL; \
	else \
	  	make -C $(build_dir) $@ ; \
	fi

config: distclean
	mkdir -p $(build_dir)
	cd $(build_dir) && cmake $(CURDIR) $(CONFIG_FLAGS)

uninstall:
	@if [ ! -f $(build_dir)/install_manifest.txt ]; then \
		echo "Installation manifest not found! Nothing to uninstall."; \
		echo "See the following help screen for usage ..."; \
		echo " "; \
		cat INSTALL; \
	else \
		xargs rm < $(build_dir)/install_manifest.txt; \
		rm -rf $(build_dir)/install_manifest.txt \
		       doc/htdocs; \
	fi

distclean:
	@-rm -rf $(build_dir)   
	@-find . -name '*~' -exec rm {} \;

help:
	@clear
	@cat INSTALL

backup:
	@-rm -f faspsolver.zip
	@-zip -r faspsolver.zip README INSTALL License Makefile VERSION     \
	                        base data test tutorial *.txt *.cmake *.tcl \
                            doc/userguide.pdf doc/refman.pdf doc/*.in vs10

version:
	@-hg log -r "." --template 'FASP {latesttag}.{latesttagdistance}:' > VERSION
	@-hg -q id >> VERSION
	@-cat VERSION

.PHONY: all backup config clean distclean install uninstall docs headers help version
